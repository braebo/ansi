{"version":3,"file":"index.js","names":["hex_color: `#${string}`","style: AnsiStyle","hex: string","opts: LogOptions","opts?: LogOptions","r: (...args: any[]) => string","g: (...args: any[]) => string","b: (...args: any[]) => string","y: (...args: any[]) => string","m: (...args: any[]) => string","c: (...args: any[]) => string","o: (...args: any[]) => string","p: (...args: any[]) => string","gr: (...args: any[]) => string","d: (...args: any[]) => string","bd: (...args: any[]) => string","em: (...args: any[]) => string","ul: (...args: any[]) => string","inv: (...args: any[]) => string","s: (...args: any[]) => string","clr: (...args: any[]) => string","count","v: any","opts: PaintOptions","options: ClrOptions","opts: ClrOptions","s","nl","n","v","_: number | string","stop: number","r","g","b","text: string","gradient: (stop: number) => string"],"sources":["../src/ansi-hex.ts","../src/ansi-logger.ts","../src/ansi-mini.ts","../src/ansi-paint.ts","../src/ansi-gradient.ts"],"sourcesContent":["export type AnsiStyle = keyof typeof ANSI_STYLE_CODES\n\nexport const ANSI_STYLE_CODES = {\n\treset: 0,\n\tbold: 1,\n\tdim: 2,\n\titalic: 3,\n\tunderline: 4,\n\tinverse: 7,\n\thidden: 8,\n\tstrikethrough: 9,\n} as const\n\nconst isFirefox = () =>\n\tglobalThis.navigator?.userAgent.indexOf('Firefox/') !== -1 &&\n\tglobalThis.navigator?.userAgent.indexOf('Seamonkey') === -1\n\nconst isSafari = () =>\n\tglobalThis.navigator?.userAgent.indexOf('Safari') !== -1 &&\n\tglobalThis.navigator?.userAgent.indexOf('Chrome') === -1\n\n/**\n * Creates an ANSI True Color _(24-bit RGB)_ formatter function from a hex color, falling back to\n * uncolored text in unsupported browsers _(Safari, Firefox)_.\n *\n * @example\n * ```ts\n * const red = ansiHex('#ff0000')\n * console.log(red('This text will be red'))\n * ```\n */\nexport function ansiHex(hex_color: `#${string}`) {\n\treturn (...args: any[]): string => {\n\t\tconst str = args.join('')\n\t\tif (isFirefox() || isSafari()) {\n\t\t\treturn str\n\t\t}\n\n\t\tconst rgb = hexToRgb(hex_color)\n\t\tif (!rgb) return str\n\n\t\tif (!str.length) {\n\t\t\t// Just return the ANSI code.\n\t\t\treturn `\\x1b[38;2;${rgb[0]};${rgb[1]};${rgb[2]}m`\n\t\t}\n\n\t\treturn `\\x1b[38;2;${rgb[0]};${rgb[1]};${rgb[2]}m${str}\\x1b[0m`\n\t}\n}\n\n/**\n * Creates an {@link AnsiStyle|ANSI style} formatter function from a style name, falling back to\n * uncolored text in unsupported browsers (Safari, Firefox).\n *\n * @example\n * ```ts\n * const bold = ansiStyle('bold')\n * console.log(bold('This text will be bold'))\n * ```\n */\nexport function ansiStyle(style: AnsiStyle): (...args: any[]) => string {\n\tif (isFirefox() || isSafari()) {\n\t\treturn (...args: any[]) => args.join('')\n\t}\n\n\tconst code = ANSI_STYLE_CODES[style]\n\tconst styleCode = `\\x1b[${code}m`\n\tconst resetCode =\n\t\tcode === 0\n\t\t\t? ''\n\t\t\t: code <= 2 // bold/dim\n\t\t\t? '\\x1b[22m'\n\t\t\t: `\\x1b[2${code}m`\n\n\treturn (...args: any[]) => {\n\t\tconst str = args.join('')\n\t\tif (str.length === 0) return styleCode\n\t\treturn `${styleCode}${str}${resetCode}`\n\t}\n}\n\n/**\n * Converts a hex color string into an `[r, g, b]` tuple in range `[0,255]`.\n */\nexport function hexToRgb(hex: string): [number, number, number] | null {\n\tconst result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n\treturn result\n\t\t? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)]\n\t\t: null\n}\n\n/** Resets the terminal color. */\nexport const CLEAR = '\\x1b[0m'\n","import { paint } from './ansi-paint'\n\n/**\n * Options for the {@link log} function.\n */\nexport interface LogOptions {\n\t/**\n\t * Alternative logger function, i.e. `console.warn/error`.\n\t * @default console.log\n\t */\n\tfn?: (...args: any[]) => void\n\n\t/**\n\t * Optional prefix to prepend to the log.\n\t * @example\n\t * ```ts\n\t * const l = (...args) => log(args, { prefix: d('┤ ') })\n\t *\n\t * l()                // ┤\n\t * l('Hello, world!') // ┤ Hello, world!\n\t * l()                // ┤\n\t * ```\n\t */\n\tprefix?: string\n\n\t/**\n\t * Delimiter to use between rest args.  Defaults to a space character.  Pass an empty string to disable.\n\t * @default ' '\n\t */\n\tdelimiter?: string\n\n\t/**\n\t * Whether to print objects in a single line when passing multiple args.\n\t * @default true\n\t */\n\tinline?: boolean\n\n\t/**\n\t * Automatically expands inline objects/arrays that exceed this width.\n\t * @default 60\n\t */\n\tprintWidth?: number\n}\n\n/**\n * You should probably use {@link logger} instead.\n *\n * Used by {@link logger} to create `console.log` with various {@link LogOptions|options} and features.\n */\nexport function log<T>(args = [] as T | T[], opts: LogOptions = {}): void {\n\topts.fn ??= console.log\n\topts.prefix ??= ''\n\topts.delimiter ??= ' '\n\n\tif (!Array.isArray(args)) {\n\t\targs = [args]\n\t}\n\n\tif (args.length === 0) {\n\t\topts.fn(opts.prefix)\n\n\t\treturn\n\t}\n\n\tif (typeof args[0] === 'string' && args.length === 1) {\n\t\tconst lines = args[0].split('\\n')\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\topts.fn(opts.prefix + lines[i])\n\t\t}\n\n\t\treturn\n\t}\n\n\ttry {\n\t\tconst a = [] as string[]\n\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\ta.push(paint(args[i], opts))\n\t\t}\n\n\t\topts.fn(opts.prefix + a.join(opts.delimiter))\n\t} catch (e) {\n\t\tconsole.error(e)\n\t\tconsole.log(args)\n\t}\n\n\treturn\n}\n\n/**\n * Creates a logger function with the given {@link LogOptions|options}.\n *\n * - {@link LogOptions.fn|`logger`} - Alternative logger function, i.e. `console.warn/error`.\n * - {@link LogOptions.prefix|`prefix`} - Optional prefix to prepend to the log.\n * - {@link LogOptions.delimiter|`delimiter`} - Delimiter to use between rest args.  Defaults to a space character.  Pass an empty string to disable.\n * - {@link LogOptions.inline|`inline`} - Whether to print objects in a single line.\n *\n * @example\n * ```ts\n * const l = logger({ prefix: d('| ') })\n *\n * l()                // |\n * l('Hello, world!') // | Hello, world!\n * l()                // |\n * ```\n */\nexport function logger(opts?: LogOptions): (...args: any[]) => void {\n\treturn (...args: any[]) => log(args, opts)\n}\n","import { ansiHex, ansiStyle } from './ansi-hex'\nimport { log } from './ansi-logger'\n\n/**\n * @fileoverview ANSI Mini\n * Irresponsibly short ANSI code wrappers for the terminal / supported browsers (Chrome).\n * It's mostly a palette of ANSI True Color wrappers using `{@link ansiHex}` and `{@link ansiStyle}`.\n *\n * @example\n * ```ts\n * import { l, r, dim, bd, em } from '@braebo/ansi/mini'\n */\n\n/** Wraps args in ansi red. */\nexport const r: (...args: any[]) => string = ansiHex('#ff5347')\n/** Wraps args in ansi green. */\nexport const g: (...args: any[]) => string = ansiHex('#57ab57')\n/** Wraps args in ansi blue. */\nexport const b: (...args: any[]) => string = ansiHex('#4c4ce0')\n/** Wraps args in ansi yellow. */\nexport const y: (...args: any[]) => string = ansiHex('#e2e270')\n/** Wraps args in ansi magenta. */\nexport const m: (...args: any[]) => string = ansiHex('#d426d4')\n/** Wraps args in ansi cyan. */\nexport const c: (...args: any[]) => string = ansiHex('#2fdede')\n/** Wraps args in ansi orange. */\nexport const o: (...args: any[]) => string = ansiHex('#ff7f50')\n/** Wraps args in ansi purple. */\nexport const p: (...args: any[]) => string = ansiHex('#9542e7')\n/** Wraps args in ansi gray. */\nexport const gr: (...args: any[]) => string = ansiHex('#808080')\n\n/** Wraps args in ansi dim. */\nexport const d: (...args: any[]) => string = ansiStyle('dim')\n/** Wraps args in ansi bold. */\nexport const bd: (...args: any[]) => string = ansiStyle('bold')\n/** Wraps args in ansi italic. */\nexport const em: (...args: any[]) => string = ansiStyle('italic')\n/** Wraps args in ansi underline. */\nexport const ul: (...args: any[]) => string = ansiStyle('underline')\n/** Wraps args in ansi inverse. */\nexport const inv: (...args: any[]) => string = ansiStyle('inverse')\n/** Wraps args in ansi strikethrough. */\nexport const s: (...args: any[]) => string = ansiStyle('strikethrough')\n\n/** Reset code to clear all ANSI styles. */\nexport const clr: (...args: any[]) => string = ansiStyle('reset')\n\n/** Logs a new line `count` times. */\nexport function n(count = 1): void {\n\tfor (let i = 0; i < count; i++) {\n\t\tlog()\n\t}\n}\n\n/** `console.log` shorthand. */\nexport function l(...args: any[]): void {\n\tlog(args)\n}\n\n/** `console.error` with prefix and ERROR label */\nexport function err(...args: any[]): void {\n\tlog(r(bd('ERROR ')), { fn: console.error })\n\tlog(args, { fn: console.error })\n}\n","import { r, g, d, o, p, y } from './ansi-mini'\n\ninterface PaintOptions {\n\t/**\n\t * Whether to print objects in a single line.\n\t *\n\t * @default true\n\t */\n\tinline?: boolean\n\t/**\n\t * Prepends a prefix to each line.\n\t * @default ''\n\t */\n\tprefix?: string\n\t/**\n\t * Characters in an inline array/object before auto-expanding.\n\t * @default 50\n\t */\n\tprintWidth?: number\n}\n\nexport function paint(v: any, opts: PaintOptions = {}): string {\n\tconst options: ClrOptions = {\n\t\tprefix: '',\n\t\tprintWidth: 60,\n\t\t// printWidth: 50,\n\t\tindent: 1,\n\t\t// wrapString: false,\n\t\t...opts,\n\t}\n\n\treturn paint_primitive(v, options)\n}\n\n/** @internal */\ninterface ClrOptions extends PaintOptions {\n\tprefix: string\n\tprintWidth: number\n\t/**\n\t * Keeps track of the current indent level.\n\t * @internal\n\t */\n\tindent: number\n\t/**\n\t * Whether to wrap strings in quotes.\n\t * @internal\n\t */\n\twrapString?: boolean\n}\n\n/**\n * Colors a primitive based on its type.\n */\nfunction paint_primitive(v: any, opts: ClrOptions): string {\n\tif (v === null) return d('null')\n\tif (v === undefined) return d('undefined')\n\tif (v === true || v === false) return y(v)\n\n\tswitch (typeof v) {\n\t\tcase 'function':\n\t\t\tconst s = o(v.toString().replaceAll(/\\n/g, ''))\n\t\t\tif (s.length < opts.printWidth) return s\n\t\t\treturn o('[Function]')\n\t\tcase 'number':\n\t\t\treturn p(v)\n\t\tcase 'string':\n\t\t\treturn opts.wrapString ? d(g(`'`)) + g(v) + d(g(`'`)) : v\n\t\tcase 'boolean':\n\t\t\treturn v ? g('true') : r('false')\n\t\tcase 'object':\n\t\t\treturn paint_object(v, opts)\n\t\tdefault:\n\t\t\treturn v\n\t}\n}\n\n/**\n * Converts an object into a colorized string.\n */\nfunction paint_object(v: any, opts: ClrOptions): string {\n\tif (!v || typeof v !== 'object') return paint_primitive(v, opts)\n\tlet { inline, indent } = opts\n\topts.wrapString ??= true\n\n\t// Handle overrides.\n\tconst keys = Array.isArray(v) ? v : Object.keys(v)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tif (keys[i] === '__inline__') {\n\t\t\tinline = v['__inline__'] ?? true\n\t\t} else if (keys[i] === '__multiline__') {\n\t\t\tinline = v['__multiline__'] ?? false\n\t\t}\n\t}\n\n\t// Handle default behavior based on size.\n\tif (typeof inline === 'undefined') {\n\t\tif (count(v) <= opts.printWidth) {\n\t\t\tinline = true\n\t\t}\n\t}\n\n\tif (Array.isArray(v)) {\n\t\t// Array printing.\n\n\t\tlet s = ''\n\t\ts += '['\n\t\tfor (let i = 0; i < v.length; i++) {\n\t\t\tif (v[i] === '__inline__' || v[i] === '__multiline__') {\n\t\t\t\t// Remove trailing comma.\n\t\t\t\tif (i === v.length - 1) {\n\t\t\t\t\tconst end = s.slice(-2)\n\t\t\t\t\tif (end === ', ') {\n\t\t\t\t\t\ts = s.slice(0, -2)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tconst nl = inline ? '' : '\\n' + opts.prefix + '  '.repeat(indent)\n\t\t\ts += nl\n\n\t\t\ts += paint_primitive(v[i], { ...opts, indent: indent + 1, inline })\n\t\t\tif (i < v.length - 1) s += ', '\n\t\t}\n\t\ts += inline ? '' : '\\n' + opts.prefix + '  '.repeat(indent - 1)\n\t\ts += ']'\n\t\treturn s\n\t}\n\n\t// Fallthrough object default inline behavior.\n\tif (typeof inline === 'undefined') {\n\t\tinline = count(v) <= opts.printWidth\n\t}\n\n\t// Object printing.\n\n\tconst nl = inline ? '' : '\\n'\n\tconst indentStr = inline ? '' : '  '.repeat(indent)\n\tconst prefix = inline ? '' : opts.prefix\n\tconst parentIndentStr = inline ? '' : '  '.repeat(indent - 1)\n\n\tlet s = '{ ' + nl\n\tconst entries = Object.entries(v)\n\tfor (let j = 0; j < entries.length; j++) {\n\t\tif (entries[j][0] === '__inline__') {\n\t\t\t// Remove trailing comma.\n\t\t\tif (j === entries.length - 1) {\n\t\t\t\tconst end = s.slice(-2)\n\t\t\t\tif (end === ', ') {\n\t\t\t\t\ts = s.slice(0, -2)\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\ts += prefix\n\t\ts += indentStr + d(entries[j][0])\n\t\ts += ': '\n\t\ts += paint_primitive(entries[j][1], { ...opts, indent: indent + 1, wrapString: true })\n\n\t\t// No trailing comma.\n\t\tif (j < entries.length - 1) {\n\t\t\ts += ', '\n\t\t\ts += nl\n\t\t}\n\t}\n\ts += nl\n\tif (inline) s += ' '\n\ts += prefix\n\ts += parentIndentStr + '}'\n\treturn s\n}\n\n/**\n * Estimates the length of the stringified object / array.\n */\nfunction count(v: any, n = v.length) {\n\tif (!Array.isArray(v)) {\n\t\treturn count(\n\t\t\tObject.entries(v).flatMap(([k, v]) => [k, v]),\n\t\t\tn,\n\t\t)\n\t}\n\n\t// Handles arrays (with nested arrays and objects).\n\tfor (let i = 0; i < v.length; i++) {\n\t\tif (typeof v[i] === 'object') {\n\t\t\tif (Array.isArray(v[i])) {\n\t\t\t\tn += count(v[i], n)\n\t\t\t} else {\n\t\t\t\tn += count(Object.values(v[i]), n)\n\t\t\t}\n\t\t} else {\n\t\t\tn += JSON.stringify(v[i])?.length ?? 0\n\t\t}\n\t}\n\treturn n\n}\n","import { hexToRgb } from './ansi-hex'\n\n/**\n * Creates a gradient function that interpolates between multiple hex colors.\n * @returns A function that generates ANSI color codes for any point along the gradient (0-1).\n *\n * @example\n * ```ts\n * const sunset = gradient('#00e1ff', '#e67e22', '#f1c40f')\n *\n * console.log(sunset(0), 'blue')\n * console.log(sunset(0.5), 'orange')\n * console.log(sunset(1), 'yellow')\n * ```\n */\nexport function ansiGradient(\n\t...hexColors: `#${string}`[]\n): (stop_or_text: number | string) => string {\n\tif (hexColors.length < 2) {\n\t\tthrow new Error('Gradient requires at least 2 colors')\n\t}\n\n\tconst rgbColors = hexColors.map((hex) => {\n\t\tconst rgb = hexToRgb(hex)\n\t\tif (!rgb) throw new Error(`Invalid hex color: ${hex}`)\n\t\treturn rgb\n\t})\n\n\treturn (_: number | string): string => {\n\t\tif (typeof _ === 'string') {\n\t\t\treturn gradientText(_, interpolate)\n\t\t}\n\n\t\treturn interpolate(_)\n\n\t\tfunction interpolate(stop: number) {\n\t\t\t// Clamp color-stop from 0-1.\n\t\t\tstop = Math.max(0, Math.min(1, stop))\n\n\t\t\t// Find the color stops we're between.\n\t\t\tconst segment = stop * (rgbColors.length - 1)\n\t\t\tconst index = Math.floor(segment)\n\t\t\tconst fraction = segment - index\n\n\t\t\t// Handle edge cases.\n\t\t\tif (index >= rgbColors.length - 1) {\n\t\t\t\tconst [r, g, b] = rgbColors[rgbColors.length - 1]\n\t\t\t\treturn `\\x1b[38;2;${r};${g};${b}m`\n\t\t\t}\n\n\t\t\t// Interpolate between the two colors.\n\t\t\tconst start = rgbColors[index]\n\t\t\tconst end = rgbColors[index + 1]\n\n\t\t\tconst r = Math.round(start[0] + (end[0] - start[0]) * fraction)\n\t\t\tconst g = Math.round(start[1] + (end[1] - start[1]) * fraction)\n\t\t\tconst b = Math.round(start[2] + (end[2] - start[2]) * fraction)\n\n\t\t\treturn `\\x1b[38;2;${r};${g};${b}m`\n\t\t}\n\t}\n}\n\nfunction gradientText(text: string, gradient: (stop: number) => string): string {\n\tlet arr = [...text]\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tarr[i] = gradient(i / (arr.length - 1)) + arr[i]\n\t}\n\treturn arr.join('') + `\\x1b[0m`\n}\n"],"mappings":"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"}