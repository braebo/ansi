{"version":3,"file":"index.js","names":["hex_color: `#${string}`","style: AnsiStyle","hex: string","r: (...args: any[]) => string","g: (...args: any[]) => string","b: (...args: any[]) => string","y: (...args: any[]) => string","m: (...args: any[]) => string","c: (...args: any[]) => string","o: (...args: any[]) => string","p: (...args: any[]) => string","gr: (...args: any[]) => string","d: (...args: any[]) => string","bd: (...args: any[]) => string","em: (...args: any[]) => string","ul: (...args: any[]) => string","inv: (...args: any[]) => string","s: (...args: any[]) => string","opts: LogOptions","s","v: any","opts: ClrOptions","v: Record<any, unknown>","position: number","r","g","b"],"sources":["../src/ansi-hex.ts","../src/ansi-mini.ts","../src/ansi-logger.ts","../src/ansi-gradient.ts"],"sourcesContent":["export type AnsiStyle = keyof typeof ANSI_STYLE_CODES\n\nexport const ANSI_STYLE_CODES = {\n\treset: 0,\n\tbold: 1,\n\tdim: 2,\n\titalic: 3,\n\tunderline: 4,\n\tinverse: 7,\n\thidden: 8,\n\tstrikethrough: 9,\n} as const\n\n/**\n * Creates an ANSI True Color _(24-bit RGB)_ formatter function from a hex color, falling back to\n * uncolored text in unsupported browsers _(Safari, Firefox)_.\n *\n * @example\n * ```ts\n * const red = ansiHex('#ff0000')\n * console.log(red('This text will be red'))\n * ```\n */\nexport function ansiHex(hex_color: `#${string}`) {\n\treturn (...args: any[]): string => {\n\t\tconst str = args.join('')\n\t\tif (globalThis.navigator?.userAgent.match(/firefox|safari/i)) {\n\t\t\treturn str\n\t\t}\n\n\t\tconst rgb = hexToRgb(hex_color)\n\t\tif (!rgb) return str\n\n\t\treturn `\\x1b[38;2;${rgb[0]};${rgb[1]};${rgb[2]}m${str}\\x1b[0m`\n\t}\n}\n\n/**\n * Creates an {@link AnsiStyle|ANSI style} formatter function from a style name, falling back to\n * uncolored text in unsupported browsers (Safari, Firefox).\n *\n * @example\n * ```ts\n * const bold = ansiStyle('bold')\n * console.log(bold('This text will be bold'))\n * ```\n */\nexport function ansiStyle(style: AnsiStyle): (...args: any[]) => string {\n\tif (globalThis.navigator?.userAgent.match(/firefox|safari/i)) {\n\t\treturn (...args: any[]) => args.join('')\n\t}\n\n\tconst code = ANSI_STYLE_CODES[style]\n\tconst styleCode = `\\x1b[${code}m`\n\tconst resetCode =\n\t\tcode === 0\n\t\t\t? ''\n\t\t\t: code <= 2 // bold/dim\n\t\t\t? '\\x1b[22m'\n\t\t\t: `\\x1b[2${code}m`\n\n\treturn (...args: any[]) => `${styleCode}${args.join('')}${resetCode}`\n}\n\n/**\n * Converts a hex color string into an `[r, g, b]` tuple in range `[0,255]`.\n */\nexport function hexToRgb(hex: string): [number, number, number] | null {\n\tconst result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n\treturn result\n\t\t? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)]\n\t\t: null\n}\n","import { ansiHex, ansiStyle } from './ansi-hex'\nimport { log } from './ansi-logger'\n\n/**\n * @fileoverview ANSI Mini\n * Irresponsibly short ANSI code wrappers for the terminal / supported browsers (Chrome).\n * It's mostly a palette of ANSI True Color wrappers using `{@link ansiHex}` and `{@link ansiStyle}`.\n *\n * @example\n * ```ts\n * import { l, r, dim, bd, em } from '@braebo/ansi/mini'\n */\n\n/** Wraps args in ansi red. */\nexport const r: (...args: any[]) => string = ansiHex('#ff5347')\n/** Wraps args in ansi green. */\nexport const g: (...args: any[]) => string = ansiHex('#57ab57')\n/** Wraps args in ansi blue. */\nexport const b: (...args: any[]) => string = ansiHex('#4c4ce0')\n/** Wraps args in ansi yellow. */\nexport const y: (...args: any[]) => string = ansiHex('#e2e270')\n/** Wraps args in ansi magenta. */\nexport const m: (...args: any[]) => string = ansiHex('#d426d4')\n/** Wraps args in ansi cyan. */\nexport const c: (...args: any[]) => string = ansiHex('#2fdede')\n/** Wraps args in ansi orange. */\nexport const o: (...args: any[]) => string = ansiHex('#ff7f50')\n/** Wraps args in ansi purple. */\nexport const p: (...args: any[]) => string = ansiHex('#9542e7')\n/** Wraps args in ansi gray. */\nexport const gr: (...args: any[]) => string = ansiHex('#808080')\n\n/** Wraps args in ansi dim. */\nexport const d: (...args: any[]) => string = ansiStyle('dim')\n/** Wraps args in ansi bold. */\nexport const bd: (...args: any[]) => string = ansiStyle('bold')\n/** Wraps args in ansi italic. */\nexport const em: (...args: any[]) => string = ansiStyle('italic')\n/** Wraps args in ansi underline. */\nexport const ul: (...args: any[]) => string = ansiStyle('underline')\n/** Wraps args in ansi inverse. */\nexport const inv: (...args: any[]) => string = ansiStyle('inverse')\n/** Wraps args in ansi strikethrough. */\nexport const s: (...args: any[]) => string = ansiStyle('strikethrough')\n\n/** Logs a new line `count` times. */\nexport function n(count = 1): void {\n\tfor (let i = 0; i < count; i++) {\n\t\tlog()\n\t}\n}\n\n/** `console.log` shorthand. */\nexport function l(...args: any[]): void {\n\tlog(args)\n}\n\n/** `console.error` with prefix and ERROR label */\nexport function err(...args: any[]): void {\n\tlog(args, { label: r(bd('ERROR ')), logger: console.error })\n}\n","import { r, g, d, o, p, y } from './ansi-mini'\n\n/**\n * Options for the {@link log} function.\n */\nexport interface LogOptions {\n\t/**\n\t * Optional label to prepend to the log.\n\t */\n\tlabel?: string\n\t/**\n\t * Alternative logger function, i.e. `console.warn/error`.\n\t * @default console.log\n\t */\n\tlogger?: (...args: any[]) => void\n\t/**\n\t * Prefix to prepend to the log.\n\t * @default d('︙ ')\n\t */\n\tprefix?: string\n\n\t/**\n\t * Delimiter to use between rest args.\n\t * @default undefined\n\t */\n\tdelimiter?: string\n\n\t/**\n\t * Whether to print objects in a single line when passing multiple args.\n\t * @default true\n\t */\n\tinline?: boolean\n}\n\n/**\n * `console.log` wrapper that handles multi-line strings and includes an optional label and prefix.\n */\nexport function log(args = [] as any[], opts: LogOptions = {}): void {\n\t// prettier-ignore\n\tconst {\n\t\tlabel = '',\n\t\tlogger = console.log,\n\t\tprefix = d('︙ '),\n\t\tdelimiter = '',\n\t\tinline = true,\n\t} = opts\n\n\tif (args.length === 0) {\n\t\tlabel && logger(prefix + label)\n\t\tlogger(prefix)\n\n\t\treturn\n\t}\n\n\tif (typeof args[0] === 'string' && args.length === 1) {\n\t\tconst lines = args[0].split('\\n')\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\tif (i === 0 && label) logger(prefix + label)\n\t\t\tlogger(prefix + lines[i])\n\t\t}\n\n\t\treturn\n\t}\n\n\tif (label) logger(prefix + label)\n\ttry {\n\t\tconst a = []\n\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\tswitch (typeof args[i]) {\n\t\t\t\tcase 'object': {\n\t\t\t\t\tif (!args[i]) {\n\t\t\t\t\t\ta.push(d(args[i]))\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tconst s = paint_object(args[i], { inline })\n\t\t\t\t\tif (inline) a.push(s)\n\t\t\t\t\telse a.push(s.replaceAll('\\n', '\\n' + prefix))\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'number': {\n\t\t\t\t\ta.push(p(args[i]))\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\ta.push(args[i])\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlogger(prefix + a.join(delimiter))\n\t} catch (e) {\n\t\tconsole.error(e)\n\t\tconsole.log(args)\n\t}\n\n\treturn\n}\n\ninterface ClrOptions {\n\t/**\n\t * Whether to print objects in a single line.\n\t * @default true\n\t */\n\tinline?: boolean\n\t/** @internal */\n\tindent?: number\n}\n\n/** Colors a primitive based on its type. */\nfunction paint_primitive(v: any, opts: ClrOptions = {}): string {\n\tif (v === null) return d('null')\n\tif (v === undefined) return d('undefined')\n\tif (v === true || v === false) return y(v)\n\n\tswitch (typeof v) {\n\t\tcase 'function':\n\t\t\tconst s = d(o(v.toString().replaceAll(/\\n/g, '')))\n\t\t\tif (s.length < 75) return s\n\t\t\treturn d(o('[Function]'))\n\t\tcase 'number':\n\t\t\treturn p(v)\n\t\tcase 'string':\n\t\t\treturn d(g('\"')) + g(v) + d(g('\"'))\n\t\tcase 'boolean':\n\t\t\treturn v ? g('true') : r('false')\n\t\tcase 'object':\n\t\t\treturn paint_object(v, opts)\n\t\tdefault:\n\t\t\treturn v\n\t}\n}\n\n/** Converts an object into a colorized string. */\nfunction paint_object(v: Record<any, unknown>, opts: ClrOptions = {}): string {\n\tconst { inline, indent = 1 } = opts\n\tconst nl = inline ? '' : '\\n'\n\tconst indentStr = inline ? '' : '  '.repeat(indent)\n\tlet s = '{ ' + nl\n\tconst entries = Object.entries(v)\n\tfor (let j = 0; j < entries.length; j++) {\n\t\ts += indentStr + d(entries[j][0])\n\t\ts += ': '\n\t\ts += paint_primitive(entries[j][1], { inline, indent: indent + 1 })\n\t\tif (j < entries.length - 1) {\n\t\t\ts += ', ' + nl\n\t\t}\n\t}\n\ts += nl\n\tif (inline) s += ' '\n\ts += '}'\n\treturn s\n}\n","import { hexToRgb } from './ansi-hex'\n\n/**\n * Creates a gradient function that interpolates between multiple hex colors.\n * @returns A function that generates ANSI color codes for any point along the gradient (0-1).\n *\n * @example\n * ```ts\n * const sunset = gradient('#00e1ff', '#e67e22', '#f1c40f')\n *\n * console.log(sunset(0), 'blue')\n * console.log(sunset(0.5), 'orange')\n * console.log(sunset(1), 'yellow')\n * ```\n */\nexport function ansiGradient(...hexColors: `#${string}`[]): (position: number) => string {\n\tif (hexColors.length < 2) {\n\t\tthrow new Error('Gradient requires at least 2 colors')\n\t}\n\n\tconst rgbColors = hexColors.map((hex) => {\n\t\tconst rgb = hexToRgb(hex)\n\t\tif (!rgb) throw new Error(`Invalid hex color: ${hex}`)\n\t\treturn rgb\n\t})\n\n\treturn (position: number): string => {\n\t\t// Clamp position to 0-1\n\t\tposition = Math.max(0, Math.min(1, position))\n\n\t\t// Find the color stops we're between\n\t\tconst segment = position * (rgbColors.length - 1)\n\t\tconst index = Math.floor(segment)\n\t\tconst fraction = segment - index\n\n\t\t// Handle edge cases\n\t\tif (index >= rgbColors.length - 1) {\n\t\t\tconst [r, g, b] = rgbColors[rgbColors.length - 1]\n\t\t\treturn `\\x1b[38;2;${r};${g};${b}m`\n\t\t}\n\n\t\t// Interpolate between the two colors\n\t\tconst start = rgbColors[index]\n\t\tconst end = rgbColors[index + 1]\n\n\t\tconst r = Math.round(start[0] + (end[0] - start[0]) * fraction)\n\t\tconst g = Math.round(start[1] + (end[1] - start[1]) * fraction)\n\t\tconst b = Math.round(start[2] + (end[2] - start[2]) * fraction)\n\n\t\treturn `\\x1b[38;2;${r};${g};${b}m`\n\t}\n}\n"],"mappings":";;MAEa,mBAAmB;CAC/B,OAAO;CACP,MAAM;CACN,KAAK;CACL,QAAQ;CACR,WAAW;CACX,SAAS;CACT,QAAQ;CACR,eAAe;AACf;AAYM,SAAS,QAAQA,WAAyB;AAChD,QAAO,CAAC,GAAG,SAAwB;EAClC,MAAM,MAAM,KAAK,KAAK,GAAG;AACzB,MAAI,WAAW,WAAW,UAAU,MAAM,kBAAkB,CAC3D,QAAO;EAGR,MAAM,MAAM,SAAS,UAAU;AAC/B,OAAK,IAAK,QAAO;AAEjB,UAAQ,YAAY,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI;CACtD;AACD;AAYM,SAAS,UAAUC,OAA8C;AACvE,KAAI,WAAW,WAAW,UAAU,MAAM,kBAAkB,CAC3D,QAAO,CAAC,GAAG,SAAgB,KAAK,KAAK,GAAG;CAGzC,MAAM,OAAO,iBAAiB;CAC9B,MAAM,aAAa,OAAO,KAAK;CAC/B,MAAM,YACL,SAAS,IACN,KACA,QAAQ,IACR,cACC,QAAQ,KAAK;AAElB,QAAO,CAAC,GAAG,UAAiB,EAAE,UAAU,EAAE,KAAK,KAAK,GAAG,CAAC,EAAE,UAAU;AACpE;AAKM,SAAS,SAASC,KAA8C;CACtE,MAAM,SAAS,4CAA4C,KAAK,IAAI;AACpE,QAAO,SACJ;EAAC,SAAS,OAAO,IAAI,GAAG;EAAE,SAAS,OAAO,IAAI,GAAG;EAAE,SAAS,OAAO,IAAI,GAAG;CAAC,IAC3E;AACH;;;;MC1DYC,IAAgC,QAAQ,UAAU;MAElDC,IAAgC,QAAQ,UAAU;MAElDC,IAAgC,QAAQ,UAAU;MAElDC,IAAgC,QAAQ,UAAU;MAElDC,IAAgC,QAAQ,UAAU;MAElDC,IAAgC,QAAQ,UAAU;MAElDC,IAAgC,QAAQ,UAAU;MAElDC,IAAgC,QAAQ,UAAU;MAElDC,KAAiC,QAAQ,UAAU;MAGnDC,IAAgC,UAAU,MAAM;MAEhDC,KAAiC,UAAU,OAAO;MAElDC,KAAiC,UAAU,SAAS;MAEpDC,KAAiC,UAAU,YAAY;MAEvDC,MAAkC,UAAU,UAAU;MAEtDC,IAAgC,UAAU,gBAAgB;AAGhE,SAAS,EAAE,QAAQ,GAAS;AAClC,MAAK,IAAI,IAAI,GAAG,IAAI,OAAO,IAC1B,MAAK;AAEN;AAGM,SAAS,EAAE,GAAG,MAAmB;AACvC,KAAI,KAAK;AACT;AAGM,SAAS,IAAI,GAAG,MAAmB;AACzC,KAAI,MAAM;EAAE,OAAO,EAAE,GAAG,SAAS,CAAC;EAAE,QAAQ,QAAQ;CAAO,EAAC;AAC5D;;;;ACvBM,SAAS,IAAI,OAAO,CAAE,GAAWC,OAAmB,CAAE,GAAQ;CAEpE,MAAM,EACL,QAAQ,IACR,SAAS,QAAQ,KACjB,SAAS,EAAE,KAAK,EAChB,YAAY,IACZ,SAAS,MACT,GAAG;AAEJ,KAAI,KAAK,WAAW,GAAG;AACtB,WAAS,OAAO,SAAS,MAAM;AAC/B,SAAO,OAAO;AAEd;CACA;AAED,YAAW,KAAK,OAAO,YAAY,KAAK,WAAW,GAAG;EACrD,MAAM,QAAQ,KAAK,GAAG,MAAM,KAAK;AACjC,OAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,OAAI,MAAM,KAAK,MAAO,QAAO,SAAS,MAAM;AAC5C,UAAO,SAAS,MAAM,GAAG;EACzB;AAED;CACA;AAED,KAAI,MAAO,QAAO,SAAS,MAAM;AACjC,KAAI;EACH,MAAM,IAAI,CAAE;AAEZ,OAAK,IAAI,IAAI,GAAG,IAAI,KAAK,QAAQ,IAChC,gBAAe,KAAK,IAApB;GACC,KAAK,UAAU;AACd,SAAK,KAAK,IAAI;AACb,OAAE,KAAK,EAAE,KAAK,GAAG,CAAC;AAClB;IACA;IACD,MAAMC,MAAI,aAAa,KAAK,IAAI,EAAE,OAAQ,EAAC;AAC3C,QAAI,OAAQ,GAAE,KAAKA,IAAE;QAChB,GAAE,KAAK,IAAE,WAAW,MAAM,OAAO,OAAO,CAAC;AAC9C;GACA;GACD,KAAK,UAAU;AACd,MAAE,KAAK,EAAE,KAAK,GAAG,CAAC;AAClB;GACA;GACD,SAAS;AACR,MAAE,KAAK,KAAK,GAAG;AACf;GACA;EACD;AAGF,SAAO,SAAS,EAAE,KAAK,UAAU,CAAC;CAClC,SAAQ,GAAG;AACX,UAAQ,MAAM,EAAE;AAChB,UAAQ,IAAI,KAAK;CACjB;AAED;AACA;;AAaD,SAAS,gBAAgBC,GAAQC,OAAmB,CAAE,GAAU;AAC/D,KAAI,MAAM,KAAM,QAAO,EAAE,OAAO;AAChC,KAAI,MAAM,UAAW,QAAO,EAAE,YAAY;AAC1C,KAAI,MAAM,QAAQ,MAAM,MAAO,QAAO,EAAE,EAAE;AAE1C,gBAAe,GAAf;EACC,KAAK;GACJ,MAAMF,MAAI,EAAE,EAAE,EAAE,UAAU,CAAC,WAAW,OAAO,GAAG,CAAC,CAAC;AAClD,OAAIA,IAAE,SAAS,GAAI,QAAOA;AAC1B,UAAO,EAAE,EAAE,aAAa,CAAC;EAC1B,KAAK,SACJ,QAAO,EAAE,EAAE;EACZ,KAAK,SACJ,QAAO,EAAE,EAAE,KAAI,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,KAAI,CAAC;EACpC,KAAK,UACJ,QAAO,IAAI,EAAE,OAAO,GAAG,EAAE,QAAQ;EAClC,KAAK,SACJ,QAAO,aAAa,GAAG,KAAK;EAC7B,QACC,QAAO;CACR;AACD;;AAGD,SAAS,aAAaG,GAAyBD,OAAmB,CAAE,GAAU;CAC7E,MAAM,EAAE,QAAQ,SAAS,GAAG,GAAG;CAC/B,MAAM,KAAK,SAAS,KAAK;CACzB,MAAM,YAAY,SAAS,KAAK,KAAK,OAAO,OAAO;CACnD,IAAIF,MAAI,OAAO;CACf,MAAM,UAAU,OAAO,QAAQ,EAAE;AACjC,MAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACxC,SAAK,YAAY,EAAE,QAAQ,GAAG,GAAG;AACjC,SAAK;AACL,SAAK,gBAAgB,QAAQ,GAAG,IAAI;GAAE;GAAQ,QAAQ,SAAS;EAAG,EAAC;AACnE,MAAI,IAAI,QAAQ,SAAS,EACxB,QAAK,OAAO;CAEb;AACD,QAAK;AACL,KAAI,OAAQ,QAAK;AACjB,QAAK;AACL,QAAOA;AACP;;;;AC1IM,SAAS,aAAa,GAAG,WAAyD;AACxF,KAAI,UAAU,SAAS,EACtB,OAAM,IAAI,MAAM;CAGjB,MAAM,YAAY,UAAU,IAAI,CAAC,QAAQ;EACxC,MAAM,MAAM,SAAS,IAAI;AACzB,OAAK,IAAK,OAAM,IAAI,OAAO,qBAAqB,IAAI;AACpD,SAAO;CACP,EAAC;AAEF,QAAO,CAACI,aAA6B;AAEpC,aAAW,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,SAAS,CAAC;EAG7C,MAAM,UAAU,YAAY,UAAU,SAAS;EAC/C,MAAM,QAAQ,KAAK,MAAM,QAAQ;EACjC,MAAM,WAAW,UAAU;AAG3B,MAAI,SAAS,UAAU,SAAS,GAAG;GAClC,MAAM,CAACC,KAAGC,KAAGC,IAAE,GAAG,UAAU,UAAU,SAAS;AAC/C,WAAQ,YAAYF,IAAE,GAAGC,IAAE,GAAGC,IAAE;EAChC;EAGD,MAAM,QAAQ,UAAU;EACxB,MAAM,MAAM,UAAU,QAAQ;EAE9B,MAAMF,MAAI,KAAK,MAAM,MAAM,MAAM,IAAI,KAAK,MAAM,MAAM,SAAS;EAC/D,MAAMC,MAAI,KAAK,MAAM,MAAM,MAAM,IAAI,KAAK,MAAM,MAAM,SAAS;EAC/D,MAAMC,MAAI,KAAK,MAAM,MAAM,MAAM,IAAI,KAAK,MAAM,MAAM,SAAS;AAE/D,UAAQ,YAAYF,IAAE,GAAGC,IAAE,GAAGC,IAAE;CAChC;AACD"}